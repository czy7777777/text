480. 一维数组的动态和
给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。

请返回 nums 的动态和。

 

示例 1：

输入：nums = [1,2,3,4]
输出：[1,3,6,10]
解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。
示例 2：

输入：nums = [1,1,1,1,1]
输出：[1,2,3,4,5]
解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。
示例 3：

输入：nums = [3,1,2,10,1]
输出：[3,4,6,16,17]

int* runningSum(int* nums, int numsSize, int* returnSize){
    int j;
    * returnSize = numsSize;
    for(j=1; j<numsSize; j++){
            nums[j] += nums[j-1];
    }
    return nums;
}

给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。

每次「迁移」操作将会引发下述活动：

位于 grid[i][j] 的元素将会移动到 grid[i][j + 1]。
位于 grid[i][n - 1] 的元素将会移动到 grid[i + 1][0]。
位于 grid[m - 1][n - 1] 的元素将会移动到 grid[0][0]。
请你返回 k 次迁移操作后最终得到的 二维网格。

 

示例 1：



输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
输出：[[9,1,2],[3,4,5],[6,7,8]]
示例 2：



输入：grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
输出：[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
示例 3：

输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
输出：[[1,2,3],[4,5,6],[7,8,9]]

void reverseCol(int** grid, int rows, int left, int right) {
    while (left < right) {
        // 对一列的元素迁移
        for (int i = 0; i < rows; i++) {
            int tmp = grid[i][left];
            grid[i][left] = grid[i][right];
            grid[i][right] = tmp;
        }
        left++, right--;
    }
}

void reverseRow(int** grid, int col, int low, int high) {
    while (low < high) {
        // 一列元素上下翻转
        int tmp = grid[low][col];
        grid[low][col] = grid[high][col];
        grid[high][col] = tmp;
        low++, high--;
    }
}

int** shiftGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes){
    int m = gridSize, n = gridColSize[0];
    returnSize[0] = gridSize;
    returnColumnSizes[0] = gridColSize;
    // 1. 某列走过 n 列次数即为该列向下旋转次数
    for (int col = 0; col < n; col++) {
        int shift = ((col + k) / n) % m;  // (col + k) / n 经过 n 几次，上下翻转取余 m 次
        reverseRow(grid, col, 0, m - 1);
        reverseRow(grid, col, 0, shift - 1);
        reverseRow(grid, col, shift, m - 1);
    }
    // 2. 把对应列移动找到
    int move = k % n;  // 列的水平移动次数
    reverseCol(grid, m, 0, n - 1);
    reverseCol(grid, m, 0, move - 1);
    reverseCol(grid, m, move, n - 1);
    return grid;
}

找出数组中重复的数字。


在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。

示例 1：

输入：
[2, 3, 1, 0, 2, 5, 3]
输出：2 或 3 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

int findRepeatNumber(int* nums, int numsSize){
    int* arr = (int*)malloc(sizeof(int) * numsSize);

    for(int i=0; i<numsSize; i++){
        arr[i] = 0;
    }

    for(int i=0; i<numsSize; i++){
        arr[nums[i]]++;
        if(arr[nums[i]]>1){
            return nums[i];
        }
    }
    return -1;
}

在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

 

示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
bool findNumberIn2DArray(int** matrix, int matrixSize, int* matrixColSize, int target){
    for (int i = 0; i < matrixSize; i++) {
        for (int j = 0; j < *matrixColSize; j++) {
            if (matrix[i][j] == target) {
                return true;
            }
        }
    }
    return false;
}

给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

 

示例 1：

输入：digits = [1,2,3]
输出：[1,2,4]
解释：输入数组表示数字 123。
示例 2：

输入：digits = [4,3,2,1]
输出：[4,3,2,2]
解释：输入数组表示数字 4321。
示例 3：

输入：digits = [0]
输出：[1]
 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/plus-one
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

int* plusOne(int* digits, int digitsSize, int* returnSize){
    int i = digitsSize - 1;
    for(i;i >= 0;i--)
    {
        if(digits[i] < 9)
        {
            digits[i]++;
            *returnSize = digitsSize;
            return digits;
        }
        digits[i] = 0; 
    }
    int* num = (int*) malloc ((digitsSize + 1) * sizeof (int));
    num[0] = 1;
    for(i = 1;i < (digitsSize + 1);i++)
        num[i] = 0;
    *returnSize = digitsSize + 1;
    return num;
}

数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。

 

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

 

示例 1:

输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
输出: 2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
int majorityElement(int* nums, int numsSize){
    int temp = 0,count = 0;        
    for(int i=0; i<numsSize; i++){
        if(count == 0){             
            temp = nums[i];
            count++;
        }else if(temp == nums[i]){  
            count++;               
        }else
            count--; 
    }  
    return temp;              
}

给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。

二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。

 

示例 1：


输入：root = [3,4,5,1,2], subRoot = [4,1,2]
输出：true
示例 2：


输入：root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
输出：false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/subtree-of-another-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
bool compare (struct TreeNode* p1,struct TreeNode* p2)
{
    if(!p1 && !p2) return true;
    if(!p1 || !p2) return false;
    if(p1->val != p2->val) return false; 
    return compare(p1->left, p2->left)&&compare(p1->right, p2->right);
    
}
bool isSubtree(struct TreeNode* s, struct TreeNode* t){
    if(!s) return false;
    return compare(s,t)||isSubtree(s->left,t)||isSubtree(s->right,t);
}

在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。

示例:

s = "abaccdeff"
返回 "b"

s = "" 
返回 " "
 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
char firstUniqChar(char* s){
    int min=0;
    int a[128]={0};
    for(int i=0;s[i]!='\0';i++)
        a[s[i]]+=1;
    for(int i=0;s[i]!='\0';i++){
        if(a[s[i]]==1)
            return s[i];
    }
    return ' ';
}

给定两个数组，编写一个函数来计算它们的交集。

 

示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]
示例 2：

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/intersection-of-two-arrays
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    if (!nums1 || !nums2 || nums1Size<=0 || nums2Size<= 0) {
        *returnSize = 0;
        return NULL;
    }
    int hash[1024] = {0};
    for (int i =0; i < nums1Size; i++) {
        hash[nums1[i]] = 1; // 标记
    }
    int *temRes = (int *)calloc(sizeof(int),nums2Size) ;
    int k = 0; // 交集个数
    for (int j = 0; j < nums2Size; j++) {
        if (hash[nums2[j]]) { // 被标记说明是交集
            temRes[k++] =  nums2[j];
            hash[nums2[j]] = 0; // 后面再用重复元素不处理
        }
    }
    *returnSize = k;
    int *res = (int *)calloc(sizeof(int),k) ;
    for (int i = 0; i < k; i++) { // temRes前k个交集元素
        res[i] = temRes[i];  
    }
    free(temRes);
    return res; 
}

编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。
 

示例 1：


输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
输出：true
示例 2：


输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
输出：false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-a-2d-matrix-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == target) {
                    return true;
                }
            }
        }

        return false;
    }
}

给你一个二进制字符串数组 strs 和两个整数 m 和 n 。

请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。

如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。

 

示例 1：

输入：strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
输出：4
解释：最多有 5 个 0 和 3 个 1 的最大子集是 {"10","0001","1","0"} ，因此答案是 4 。
其他满足题意但较小的子集包括 {"0001","1"} 和 {"10","1","0"} 。{"111001"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。
示例 2：

输入：strs = ["10", "0", "1"], m = 1, n = 1
输出：2
解释：最大的子集是 {"0", "1"} ，所以答案是 2 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ones-and-zeroes
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
int findMaxForm(char ** strs, int strsSize, int m, int n)
{
    //可以看成一个二维背包
    //dp[i][j]：最多有i个0和j个1的strs的最⼤⼦集的⼤⼩为dp[i][j]
    int **dp=(int**)malloc(sizeof(int*)*(m+1));
    for(int i=0;i<=m;i++)
    {
        dp[i]=(int*)calloc(sizeof(int),(n+1));
    }

    for(int p=0; p<strsSize; p++){
        int Onesum = 0;
        int Zerosum = 0;
        for(int q=0; q<strlen(strs[p]); q++){
            if(strs[p][q]=='0'){
                Zerosum++;
            }else{
                Onesum++;
            }
        }
        //计算dp数组,需要倒序遍历二维背包
        for(int i=m; i>=Zerosum; i--)
        {
            for(int j=n; j>=Onesum; j--)
            {
                dp[i][j]=fmax(dp[i][j],dp[i-Zerosum][j-Onesum]+1);
            }
        }
    }
    return dp[m][n];
}
